@using Contracts.Releases.Responses
@using Mari.Client.Models.Enums
@using Mari.Contracts.Users.Responce
@inject IReleaseManager ReleaseManager
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IUserManager UserManager

<MudTable Class="mt-8" CanCancelEdit="true" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
    RowEditCommit="ItemHasBeenCommitted" CommitEditTooltip="Сохранить" Filter="new Func<UserResponce,bool>(FilterFunc)"
    OnCommitEditClick="@(() => Snackbar.Add("Изменения сохранены"))" EditTrigger="@editTrigger" Items="@Users"
    Hover="true" T="UserResponce">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Настройки</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Пользователь</MudTh>
        <MudTh>Роль</MudTh>
        <MudTh>Уведомления</MudTh>
        <MudTh>Активен</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="User">@context.Username</MudTd>
        <MudTd DataLabel="Role">@context.Role</MudTd>
        <MudTd DataLabel="Notifications">@GetMultiSelectionText(context.Notifications)</MudTd>
        <MudTd DataLabel="IsActive">
            <MudCheckBox @bind-Checked="@context.IsActive" Disabled="true"></MudCheckBox>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="User">
            @context.Username
        </MudTd>
        <MudTd DataLabel="Role">
            <div @onclick:stopPropagation="true" @onclick:preventDefault="true">
                <MudSelect @bind-Value="@context.Role" Required>
                    @foreach (var item in Enum.GetValues(typeof(UserRole)))
                    {
                        <MudSelectItem Value="@Convert.ToString(item)">@item</MudSelectItem>
                    }
                </MudSelect>
            </div>
        </MudTd>
        <MudTd DataLabel="Notifications">
            <div @onclick:stopPropagation="true" @onclick:preventDefault="true">
                <MudSelect T="string" MultiSelection="true" SelectAll="true" SelectAllText="Включены все уведомления"
                    @bind-Value="value" @bind-SelectedValues="Selected"
                    MultiSelectionTextFunc="@(new Func<IList<string>, string>(GetMultiSelectionText))"
                    Label="Notifications" AdornmentIcon="@Icons.Material.Filled.Search">
                    @foreach (var item in Platforms)
                    {
                        <MudSelectItem T="string" Value="@item.Name">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </div>
        </MudTd>
        <MudTd DataLabel="IsActive">
            <div @onclick:stopPropagation="true" @onclick:preventDefault="true">
                <MudCheckBox @bind-Checked="@context.IsActive">

                </MudCheckBox>
            </div>
        </MudTd>
    </RowEditingTemplate>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction"
            Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>

@code
{
    private TableEditTrigger editTrigger = TableEditTrigger.EditButton;
    private UserResponce elementBeforeEdit;
    private string searchString = "";



    private void BackupItem(object user)
    {
        elementBeforeEdit = new UserResponce
        (
        ((UserResponce)user).Id,
        ((UserResponce)user).Username,
        ((UserResponce)user).Role,
        new List<string>(((UserResponce)user).Notifications),
        ((UserResponce)user).IsActive
        );
        Selected = new List<string>(((UserResponce)user).Notifications);

        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object user)
    {
        ((UserResponce)user).Username = elementBeforeEdit.Username;
        ((UserResponce)user).Role = elementBeforeEdit.Role;
        ((UserResponce)user).Notifications = new List<string>(elementBeforeEdit.Notifications);
        ((UserResponce)user).IsActive = elementBeforeEdit.IsActive;
        StateHasChanged();
    }

    private void ItemHasBeenCommitted(object user)
    {
        ((UserResponce)user).Notifications = new List<string>(Selected);
        StateHasChanged();
    }

    private bool FilterFunc(UserResponce user)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (user.Username.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.Role.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{user.Username} {user.Role}".Contains(searchString))
            return true;
        return false;
    }


    private IList<UserResponce> Users { get; set; } = new List<UserResponce>();

    private string value { get; set; } = "Ничего не выбрано";
    private IList<PlatformResponse> Platforms { get; set; } = new List<PlatformResponse>();
    private IEnumerable<string> Selected { get; set; } = new List<string>() { };


    protected override async Task OnInitializedAsync()
    {
        Users = await UserManager.GetAll();
        Platforms = null;
    }

    private string GetMultiSelectionText(IList<string> selectedValues)
    {
        return $"Уведомления приходят по {selectedValues.Count} {(selectedValues.Count == 1 ? "платформе" : "платформам")}";
    }


}