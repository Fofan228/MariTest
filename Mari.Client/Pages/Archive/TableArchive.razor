@using Mari.Contracts.Releases
@using Mari.Contracts.Releases.Responses
@using Mari.Client.Models.Releases
@inject IReleaseManager ReleaseManager
@inject NavigationManager NavigationManager

<MudTable Class="mt-8" Items="@Releases" Hover="true" T="ReleaseModel"
          OnRowClick="RowClicked" Filter="new Func<ReleaseModel, bool>(FilterFunc)">
    <ToolBarContent>
          <MudText Typo="Typo.h6">Настройки</MudText>
          <MudSpacer />
          <MudTextField @bind-Value="searchString" Placeholder="Поиск по платформе, релизной задаче, статусу и датам"
                        Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Платформа</MudTh>
        <MudTh>Версия</MudTh>
        <MudTh>Релизная задача</MudTh>
        <MudTh>Статус релиза</MudTh>
        <MudTh>Дата изменения</MudTh>
        <MudTh>Дата завершения</MudTh>
    </HeaderContent>
    <RowTemplate>

        <MudTd DataLabel="PlatformName">@context.PlatformName</MudTd>

        <MudTd DataLabel="Version">@($"{context.Version.Major.ToString()}.{context.Version.Minor.ToString()}.{context.Version.Patch.ToString()}")</MudTd>

        <MudTd DataLabel="ReleaseTask">@context.MainIssue</MudTd>

        <MudTd DataLabel="ReleaseStatus">@context.Status</MudTd>

        <MudTd DataLabel="UpdateDate">@context.UpdateDate.ToString()</MudTd>

        <MudTd DataLabel="CompleteDate">@context.CompleteDate.ToString()</MudTd>

    </RowTemplate>
</MudTable>

@code {
    private string searchString = "";
    private List<ReleaseModel> Releases { get; set; }

    protected override async Task OnInitializedAsync()
    {
    // Releases = await ReleaseManager.GetArchive();
        
        
    // TODO Тестовые данные
        Releases = new List<ReleaseModel>
        {
            new ReleaseModel()
            {
                Id = Guid.NewGuid(),
                Version = new VersionModel()
                {
                    Major = 1,
                    Minor = 1,
                    Patch = 1
                },
                PlatformName = "Android",
                UpdateDate = new DateTime(2022, 11, 11),
                CompleteDate = new DateTime(2022, 11, 11),
                MainIssue = "http",
                Description = "GG"
            },
            new ReleaseModel()
            {
                Id = Guid.NewGuid(),
                Version = new VersionModel()
                {
                    Major = 1,
                    Minor = 1,
                    Patch = 1
                },
                PlatformName = "Android",
                UpdateDate = new DateTime(2022, 11, 11),
                CompleteDate = new DateTime(2022, 11, 11),
                MainIssue = "http",
                Description = "GG"
            }
        };
          
        
    // конец
    }

    private void RowClicked(TableRowClickEventArgs<ReleaseModel> _)
    {
    
        NavigationManager.NavigateTo($"/info/{_.Item.Id}");
        
    }
    
    private bool FilterFunc(ReleaseModel answer)
    {
        if (string.IsNullOrEmpty(searchString))
            return true;
        if (answer.PlatformName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (answer.MainIssue.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (answer.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return $"{answer.UpdateDate} {answer.CompleteDate}".Contains(searchString);
    }
}