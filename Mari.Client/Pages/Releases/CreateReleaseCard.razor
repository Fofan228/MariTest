@using Contracts.Releases
@using Mari.Client.Common.Http.ProblemsHandling
@using Mari.Client.Models.Releases
@using Mari.Contracts.Releases.Responses
@using Mari.Http.Models
@using Microsoft.Extensions.Options
@inject IReleaseManager ReleaseManager


<MudPaper Class="" Elevation="0">
    <MudCard Class="border card-create-release">
              
        <MudForm @ref="_form" Model="@ReleaseCreate" @bind-IsValid="@_success">
            <MudCardActions Class="pb-0">
                <!-- TODO доделать OnClick -->
                <MudIconButton Class="ml-auto" OnClick="SwitchDimming" Icon="@Icons.Filled.Close" />
            </MudCardActions>

            <MudCardContent Class="pt-0">
                
                
                <MudDatePicker @bind-Date="ReleaseCreate.CompleteDate" @ref="DatePicker" Label="Дата Завершения">
                    <PickerActions>
                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => DatePicker.Clear())">Clear</MudButton>
                        <MudButton OnClick="@(() => DatePicker.Close(false))">Cancel</MudButton>
                        <MudButton Color="Color.Primary" OnClick="@(() => DatePicker.Close())">Ok</MudButton>
                    </PickerActions>
                </MudDatePicker>
                
                <MudAutocomplete ResetValueOnEmptyText="true"
                                 Immediate="true" T="string" Label="Платформа" CoerceValue="true"
                                 @bind-Value="ReleaseCreate.PlatformName" SearchFunc="@SearchPlatform"
                                 Validation="@(new Func<string, IEnumerable<string>>(ValidatePlatform))" Required/>

                <MudContainer Class="flex-row d-flex align-end px-0 flex-grow-1 gap-1">
                    <MudText >Версия: </MudText>
                    <MudTextField @bind-Value="ReleaseCreate.Major"  Class="flex-none" Style="max-width: 28px" Variant="Variant.Text" MaxLength="2" Immediate="true" Required RequiredError="@String.Empty"/>
                    <MudText >.</MudText>
                    <MudTextField @bind-Value="ReleaseCreate.Minor" Class="flex-none" Style="max-width: 28px" Variant="Variant.Text" MaxLength="2" Immediate="true" Required RequiredError="@String.Empty"/>
                    <MudText>.</MudText>
                    <MudTextField @bind-Value="ReleaseCreate.Patch" Class="flex-none" Style="max-width: 28px" Variant="Variant.Text" MaxLength="2" Immediate="true" Required RequiredError="@String.Empty"/>
                </MudContainer>

                <MudTextField @bind-Value="ReleaseCreate.MainIssue"  Immediate="true"
                    Label="Ссылка на релиз задачу" />

                <MudTextField @bind-Value="ReleaseCreate.Description" Immediate="true"
                    Variant="Variant.Filled" Lines="5" Label="Информация" />

            </MudCardContent>

            <MudCardActions>
                @* @if (!string.IsNullOrWhiteSpace(ReleaseCreate.PlatformName) && *@
                @*      !string.IsNullOrWhiteSpace(ReleaseCreate.Minor.ToString()) && *@
                @*      !string.IsNullOrWhiteSpace(ReleaseCreate.Major.ToString()) && *@
                @*      !string.IsNullOrWhiteSpace(ReleaseCreate.Patch.ToString()) *@
                @*     ) *@
                @* { *@
                @*     <MudButton @onclick="ClickOnCreateRelease" Variant="Variant.Filled" Color="Color.Primary" *@
                @*                Class="mx-auto">Добавить</MudButton> *@
                @* } *@
                <MudButton @onclick="ClickOnCreateRelease" Variant="Variant.Filled"
                           Color="Color.Primary" Class="mx-auto" Disabled="@(!_success)">
                    Добавить
                </MudButton>
            </MudCardActions>
        </MudForm>
    </MudCard>
</MudPaper>



@code {

    private MudForm _form;
    private bool _success;
    private MudDatePicker DatePicker;

    [Parameter]
    public Action OnAddRelease { get; set;  } 
    
    [Parameter]
    public Action SwitchDimming { get; set; }
    
    [Parameter]
    public Action SwitchDimmingAdd { get; set; }
    
  
    private ReleaseCreateModel ReleaseCreate { get; set; } = new ReleaseCreateModel();
    private IList<PlatformResponse> Platforms { get; set; } 

    private string[] AllNamePlatforms { get; set; } 
    
    public async  Task ClickOnCreateRelease()
    {
        await ReleaseManager.Create(ReleaseCreate);

        SwitchDimmingAdd();
    }
    
    private async Task<IEnumerable<string>> SearchPlatform(string value)
    {
        return  string.IsNullOrEmpty(value) ? AllNamePlatforms
            : AllNamePlatforms.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    
   // DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

  //  [Inject] private IDialogService DialogService { get; set; }
    
    
    /*private async void OnButtonClicked(ProblemDetails obj)
    {
        bool? result = await DialogService.ShowMessageBox(
            obj.Title, 
            "Deleting can not be undone!", 
            yesText:"Delete!", cancelText:"Cancel");
        StateHasChanged();
    }*/
    
    protected override async Task OnInitializedAsync()
    {
      //  StateHasChanged();
        //ProblemHandler1.DefaultProblemEvent += new Action<ProblemDetails>(OnButtonClicked) ;
        
        
         //Platforms = await ReleaseManager.GetAllPlatforms();
        
        // TODO Тестовые данные
            Platforms = new List<PlatformResponse>()
            {
                new PlatformResponse("Android", 1, 1, 1),
                new PlatformResponse("Ios", 1, 1, 1)
            };
        // конец

            AllNamePlatforms = Platforms.ToList().Select(x => x.Name).ToArray();
    }

    private IEnumerable<string> ValidatePlatform(string value)
    {
        if (!string.IsNullOrWhiteSpace(value)) yield break;
        yield return "Заполните платформу";
    }

}
