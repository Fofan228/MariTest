 @using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Mari.Client.Models.Comments
@using Microsoft.IdentityModel.JsonWebTokens
@inject ICommentManager CommentManager

<MudPaper Elevation="0" Class="pt-2"> 
    <MudStack > <!--TODO убрать дублирование кода-->
        @foreach (var comment in UserComments)
            {
                <MudPaper Class="border-b pl-4 pb-4" Elevation="0" Height="20vh">
                        
                    <MudPaper Class=" d-flex" Elevation="0">
                        <MudAvatar Color="Color.Primary">M</MudAvatar>
                        <MudPaper Class="d-flex align-center pl-4" Elevation="0">
                            <MudText>@comment.UserName</MudText>
                        </MudPaper>
                    </MudPaper>

                    <MudPaper Class="pt-2" Elevation="0">
                        <MudText>@comment.CreateDate.ToString()</MudText>
                    </MudPaper>

                    <MudPaper Class="pt-2" Elevation="0">
                        <MudText>@comment.Message</MudText>
                    </MudPaper>
                </MudPaper>
            }
    </MudStack>
</MudPaper>
 
 
<AuthorizeView>
    <Authorized>
         <MudPaper Elevation="3" Square="true" Class="border-b px-4 py-4 d-flex flex-column" Style="bottom: 0; position: sticky;">
            <MudPaper Class="d-flex" Elevation="0">
                <MudAvatar Color="Color.Primary">M</MudAvatar>
                <MudPaper Class="d-flex align-center pl-4" Elevation="0">
                    <MudText>@context.User.Identity?.Name</MudText>
                </MudPaper>
            </MudPaper>
            <MudForm>
                <MudTextField @bind-Value="@Text" Lines="3" Label="Введите текст" Variant="Variant.Filled" Clearable="true"/>
                <MudButton Class="mt-2" OnClick="AddComment(    @context.User.Claims.First( c => c.Type == ReleaseId).Value)" Variant="Variant.Filled" Color="Color.Primary">Отправить</MudButton>
            </MudForm>
        </MudPaper>
    </Authorized>
</AuthorizeView>
 
    
@code {

    [Parameter]
    public string ReleaseId { get; set; } = null!;

    private List<CommentModel> UserComments { get; set; } = new List<CommentModel>();

    private CommentModel NewCommnet { get; set; } = new CommentModel();

    protected override async Task OnInitializedAsync()
    {
       // UserComments = await CommentManager.GetAllUserComment(Guid.Parse(Id));
        
    // TODO Тестовые данные
        /*UserComments = new List<CommentModel>
        {
            new CommentModel()
            {
                CommentId = Guid.NewGuid(),
                ReleaseId = Guid.NewGuid(),
                UserId = 1,
                UserName = Name,
                Message = Text,
                CreateDate = DateTime.Now,
                IsEdit = false
            }
        };*/
    }

    string Name { get; set; } = "Ахимат";
    string Text { get; set; }

    private void AddComment(string ReleaseId)
    {
        NewCommnet.ReleaseId = new Guid(ReleaseId);
      //  NewCommnet.UserId = userId;
        
        Text = null;
     // CommentManager.Post(newCommnet); 
    // Comments = await CommentManager.GetAllUserComment(Guid.Parse(Id));
        StateHasChanged();
    }
}

