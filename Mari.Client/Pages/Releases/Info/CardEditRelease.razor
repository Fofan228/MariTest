@using Mari.Contracts.Releases
@using System.Data
@using Mari.Client.Models.Releases
@using Mari.Contracts.Platforms.Responces
@using Mari.Contracts.Releases.Responce
@using Microsoft.AspNetCore.Components
@inject HttpClient Client


<MudPaper Class="paper-edit-release" Elevation="0">
    <MudCard Class="border card-create-release">

        <MudForm Model="@EditRelease">
            <MudCardActions Class="pb-0">
                <!-- TODO доделать OnClick -->
                <MudIconButton Class="ml-auto" OnClick="ClickOnEditingRelease" Icon="@Icons.Filled.Close" />
            </MudCardActions>

            <MudCardContent Class="pt-0">
                
                <MudDatePicker @bind-Date="EditRelease.CompleteDate" @ref="DatePicker"  Label="Дата Завершения">
                    <PickerActions>
                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => DatePicker.Clear())">Clear</MudButton>
                        <MudButton OnClick="@(() => DatePicker.Close(false))">Cancel</MudButton>
                        <MudButton Color="Color.Primary" OnClick="@(() => DatePicker.Close())">Ok</MudButton>
                    </PickerActions>
                </MudDatePicker>
                
                <MudAutocomplete ResetValueOnEmptyText="false" CoerceText="false" CoerceValue="true" T="string"
                                 @bind-Value="EditRelease.PlatformName" SearchFunc="@SearchPlatform" Label="Платформа"/>
                
                   <MudContainer Class="flex-row d-flex align-end px-0 flex-grow-1 gap-1">
                        <MudText >Версия: </MudText>
                        <MudTextField @bind-Value="EditRelease.Major"  Class="flex-none" Style="max-width: 28px" Variant="Variant.Text" MaxLength="2" Immediate="true"/>
                        <MudText >.</MudText>
                        <MudTextField @bind-Value="EditRelease.Minor" Class="flex-none" Style="max-width: 28px" Variant="Variant.Text" MaxLength="2" Immediate="true"/>
                        <MudText>.</MudText>
                        <MudTextField @bind-Value="EditRelease.Patch" Class="flex-none" Style="max-width: 28px" Variant="Variant.Text" MaxLength="2" Immediate="true"/>
                    </MudContainer>
               
                
                <MudTextField @bind-Value="EditRelease.Status"   Immediate="true" Label="Статус" /> <!-- TODO только для релиз-менеджера -->

                <MudTextField @bind-Value="EditRelease.MainIssue"   Immediate="true"
                              Label="Ссылка на релиз задачу" />

                <MudTextField @bind-Value="EditRelease.Description"  Immediate="true"
                    Variant="Variant.Filled" Lines="5" Label="Информация" />

            </MudCardContent>

            <MudCardActions>
                <!-- TODO доделать OnClick -->
                <MudButton OnClick="ClickOnEditRelease" Variant="Variant.Filled" Color="Color.Primary"
                    Class="mx-auto">Добавить</MudButton>
            </MudCardActions>
        </MudForm>

    </MudCard>
</MudPaper>


@code {
    private List<PlatformResponce> Platforms { get; set; }
    private string[] AllPlatforms { get; set; }
	
	[Parameter]
	public Action ClickOnEditingRelease { get; set; } = () => { };

    [Parameter]
    public ReleaseResponse Release { get; set;  }
    
    public ReleaseUpdateModel EditRelease { get; set; }
    //public DateTime? EditDateForRelease { get; set; } = new DateTime(); 
    
	MudDatePicker DatePicker;

    protected override async Task OnInitializedAsync()
    {
        
        EditRelease = new ReleaseUpdateModel(
            Release.ReleaseId,
            Release.Major,
            Release.Minor,
            Release.Patch,
            Release.PlatformName,
            Release.Status,
            Release.MainIssue,
            Release.CompleteDate,
            Release.Description
            );
    }
    
    public async Task ClickOnEditRelease()
    {
   //     EditRelease.CompleteDate = EditDateForRelease;
        
      //  Client.PostAsJsonAsync<ReleaseEditPostRequest>(Routes.Server.ReleaseController, EditRelease);
        ClickOnEditingRelease(); 
    }
    
    private async Task<IEnumerable<string>> SearchPlatform(string value)
    {
        await Task.Delay(5);

        return string.IsNullOrEmpty(value) ? AllPlatforms
            : AllPlatforms.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}