
@using Contracts.Releases
@using Mari.Client.Models.Enums
@using Mari.Client.Models.Releases
@using Mari.Contracts.Releases.Responses
@using Microsoft.AspNetCore.Components
@using System.Xml.Linq
@inject IReleaseManager ReleaseManager
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudTable Items="@Releases" Hover="true" T="ReleaseModel" Class="my-8" CanCancelEdit="true"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted"
          CommitEditTooltip="Сохранить" CancelEditTooltip="Отменить"
          EditTrigger="@editTrigger" Filter="new Func<ReleaseModel,bool>(FilterFunc)"
          OnCommitEditClick="@(() => { Snackbar.Add("Изменения сохранены"); 
                                         _clickOnRow = true; })"
          OnCancelEditClick="@(() => { Snackbar.Add("Отменено"); _clickOnRow = true; })"
          OnPreviewEditClick="@(() => _clickOnRow = false)" OnRowClick="RowClicked"> 
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Поиск по платформе, релизной задаче, статусу и датам"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
    </ToolBarContent>
    <ColGroup>
        <col style="width: 15%;"/>
        <col style="width: 10%;"/>
        <col style="width: 25%;"/>
        <col style="width: 17%;"/>
        <col style="width: 15%;"/>
        <col style="width: 15%;"/>
        <col >
    </ColGroup>
    <HeaderContent>
        <MudTh>Платформа</MudTh>
        <MudTh>Версия</MudTh>
        <MudTh>Релизная задача</MudTh>
        <MudTh>Статус релиза</MudTh>
        <MudTh>Дата изменения</MudTh>
        <MudTh>Дата завершения</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="PlatformName">@context.PlatformName</MudTd>
        <MudTd DataLabel="Version">@($"{context.Version.Major.ToString()}.{context.Version.Minor.ToString()}.{context.Version.Patch.ToString()}")</MudTd>
        <MudTd DataLabel="ReleaseTask">
            <div @onclick:stopPropagation="true">
                <MudLink Href="@context.MainIssue">@context.MainIssue</MudLink>
            </div>
        </MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="UpdateDate">@context.UpdateDate.ToString()</MudTd>
        <MudTd DataLabel="CompleteDate">@context.CompleteDate.ToString()</MudTd>
        <MudTd>
            <div @onclick:stopPropagation="true">
                <MudTooltip Text="Завершить">
                   <MudIconButton Class="pa-0" OnClick="@(() => Trans(context))" Icon="@Icons.Filled.CancelScheduleSend"
                                  Size="@Size.Medium" Color="Color.Primary"/>
                </MudTooltip>
            </div>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="PlatformName">
            @context.PlatformName
        </MudTd>
        <MudTd DataLabel="Version">
            @($"{context.Version.Major.ToString()}.{context.Version.Minor.ToString()}.{context.Version.Patch.ToString()}")
        </MudTd>
        <MudTd DataLabel="ReleaseTask">
            @context.MainIssue
        </MudTd>
        <MudTd DataLabel="Status">
            <MudSelect @bind-Value="@context.Status" Required>
                @foreach (var item in Enum.GetValues(typeof(ReleaseStatus)))
                {
                    <MudSelectItem Value="@Convert.ToString(item)">@item</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="UpdateDate">@context.UpdateDate.ToString()</MudTd>
        <MudTd>
            <MudDatePicker @bind-Date="@context.CompleteDate" PickerVariant="PickerVariant.Dialog" />
        </MudTd>
        <MudTd>
            <MudIconButton Class="pa-0" Icon="@Icons.Filled.CancelScheduleSend"
                           Disabled="true" Size="@Size.Medium" Color="Color.Primary"/>
        </MudTd>
    </RowEditingTemplate>
    <EditButtonContent Context="button">
        <MudTooltip Text="Изменить">
            <MudIconButton Size="@Size.Medium" Icon="@Icons.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled"/>
        </MudTooltip>
    </EditButtonContent>
</MudTable>

@code
{
    //Todo отправить изменение
    
    bool _clickOnRow = true;
    private string _searchString = "";
    private TableEditTrigger editTrigger = TableEditTrigger.EditButton;
    private ReleaseModel elementBeforeEdit;
    
    private IList<ReleaseModel> Releases { get; set; }
    private IList<PlatformModel> Platforms { get; set; }

    
    protected override async Task OnInitializedAsync()
    {
        Releases = await ReleaseManager.GetInWork();
        Platforms = await ReleaseManager.GetAllPlatforms();
       
    /*// TODO Тестовые данные
        Releases = new List<ReleaseModel>()
        {
            new ReleaseModel(Guid.NewGuid(), 1,1,1, "Android", "Testing", 
                new DateTime(2022, 11, 11), new DateTime(2022, 11, 11), "http","GG"),
            new ReleaseModel(Guid.NewGuid(), 1,1,1, "Android", "Testing", 
                new DateTime(2022, 11, 11), new DateTime(2022, 11, 11),"http", "GG"),
            new ReleaseModel(Guid.NewGuid(), 1,1,1, "Android", "Testing", 
                new DateTime(2022, 11, 11), new DateTime(2022, 11, 11), "http","GG")
        };
    // конец*/
    }

    private void RowClicked(TableRowClickEventArgs<ReleaseModel> _)
    {
        if (_clickOnRow)
        {
            NavigationManager.NavigateTo($"/info/{_.Item.Id}");
        }
    }

    private void BackupItem(object obj)
    {
        var release = (ReleaseModel)obj;

        elementBeforeEdit = new ReleaseModel
        {
            Id = release.Id,
            Version = release.Version,
            PlatformName = release.PlatformName,
            Status = release.Status,
            CompleteDate = release.CompleteDate,
            UpdateDate =release.UpdateDate,
            MainIssue = release.MainIssue,
            Description =release.Description
        };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object release)
    {
        ((ReleaseModel)release).Version = elementBeforeEdit.Version;
        ((ReleaseModel)release).PlatformName = elementBeforeEdit.PlatformName;
        ((ReleaseModel)release).Status = elementBeforeEdit.Status;
        ((ReleaseModel)release).MainIssue = elementBeforeEdit.MainIssue;
        ((ReleaseModel)release).CompleteDate = elementBeforeEdit.CompleteDate;
        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object release)
    {
        await ReleaseManager.Update((ReleaseModel)release);
        Releases = await ReleaseManager.GetInWork() ;
        
        StateHasChanged();
    }
    
    private bool FilterFunc(ReleaseModel answer)
    {
        if (string.IsNullOrEmpty(_searchString))
            return true;
        if (answer.PlatformName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (answer.MainIssue.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (answer.Status.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return $"{answer.UpdateDate} {answer.CompleteDate}".Contains(_searchString);
    }
    
    
    private async Task Trans(ReleaseModel model)
    {
        await ReleaseManager.SetCompleteStatus(model.Id);
        Releases =await ReleaseManager.GetInWork();
        StateHasChanged();
    }
}