
@using Contracts.Releases
@using Mari.Client.Models.Releases
@using System.Text
@using Mari.Client.Models.Enums
@using Mari.Contracts.Releases.Responses
@using Microsoft.AspNetCore.Components
@inject IReleaseManager ReleaseManager
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudTable Items="@Releases" Hover="true" T="ReleaseModel" Class="mt-8" CanCancelEdit="true"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted"
          CommitEditTooltip="Сохранить" CancelEditTooltip="Отменить"
          EditTrigger="@editTrigger" Filter="new Func<ReleaseModel,bool>(FilterFunc)"
          OnCommitEditClick="@(() => { Snackbar.Add("Изменения сохранены");
                                         _clickOnRow = true; })"
          OnCancelEditClick="@(() => { Snackbar.Add("Отменено"); _clickOnRow = true; })"
          OnPreviewEditClick="@(() => _clickOnRow = false)" OnRowClick="RowClicked"> 
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Поиск по платформе, версии, релизной задаче, статусу и датам"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
    </ToolBarContent>
    <ColGroup>
        <col style="width: 15%;"/>
        <col style="width: 10%;"/>
        <col style="width: 25%;"/>
        <col style="width: 17%;"/>
        <col style="width: 15%;"/>
        <col style="width: 15%;"/>
        <col>
    </ColGroup>
    <HeaderContent>
        <MudTh>Платформа</MudTh>
        <MudTh>Версия</MudTh>
        <MudTh>Релизная задача</MudTh>
        <MudTh>Статус релиза</MudTh>
        <MudTh>Дата изменения</MudTh>
        <MudTh>Дата завершения</MudTh>
        <MudTh/>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="PlatformName">@context.PlatformName</MudTd>
        <MudTd DataLabel="Version">@($"{context.Major.ToString()}.{context.Minor.ToString()}.{context.Patch.ToString()}")</MudTd>
        <MudTd DataLabel="ReleaseTask">
            <div @onclick:stopPropagation="true">
                <MudLink Href="@context.MainIssue">@context.MainIssue</MudLink>
            </div>
        </MudTd>
        <MudTd DataLabel="Status">@context.ReleaseStatus</MudTd>
        <MudTd DataLabel="UpdateDate">@context.UpdateDate.ToString()</MudTd>
        <MudTd DataLabel="CompleteDate">@context.CompleteDate.ToString()</MudTd>
        <MudTd>
            <div @onclick:stopPropagation="true">
                <MudTooltip Text="Отправить в работу">
                    <MudIconButton Class="pa-0" Icon="@Icons.Filled.ScheduleSend"
                                   Size="@Size.Medium" Color="Color.Primary"/>
                </MudTooltip>
            </div>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="PlatformName">
            <MudAutocomplete T="string" @bind-Value="@context.PlatformName" SearchFunc="@SearchPlatform" CoerceValue="true"/>
        </MudTd>
        <MudTd DataLabel="Version">

            <MudContainer  Class="flex-row d-flex align-end px-0 flex-grow-1 gap-1" >
                <MudTextField @bind-Value="@context.Major" Class="flex-none" Style="max-width: 28px" Variant="Variant.Text"  MaxLength="2"  Immediate="true" Label="Версия" /> 
                <MudText >.</MudText>
                <MudTextField @bind-Value="@context.Minor" Class="flex-none" Style="max-width: 28px" Variant="Variant.Text"  MaxLength="2"  Immediate="true"  /> 
                <MudText>.</MudText>
                <MudTextField @bind-Value="@context.Patch" Class="flex-none" Style="max-width: 28px" Variant="Variant.Text"  MaxLength="2"  Immediate="true"  /> 
            </MudContainer>

        </MudTd>
        <MudTd DataLabel="ReleaseTask">
            <MudTextField @bind-Value="@context.MainIssue" Required/>
        </MudTd>
        <MudTd DataLabel="Status">
            @context.ReleaseStatus
        </MudTd>
        <MudTd DataLabel="UpdateDate">
            @context.UpdateDate.ToString()
        </MudTd>
        <MudTd DataLabel="CompleteDate">
            <MudDatePicker @bind-Date="@context.CompleteDate" PickerVariant="PickerVariant.Dialog" />
        </MudTd>
        <MudTd>
            <MudIconButton Class="pa-0"Icon="@Icons.Filled.ScheduleSend"
                           Disabled="true" Size="@Size.Medium" Color="Color.Primary"/>
        </MudTd>
    </RowEditingTemplate>
    <EditButtonContent Context="button">
        <MudTooltip Text="Изменить">
            <MudIconButton Size="@Size.Medium" Icon="@Icons.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled"/>
        </MudTooltip>
    </EditButtonContent>
</MudTable>

@if (IsDimming)
{
    <MudPaper Class="paper-create-release" Elevation="0">
        <CreateReleaseCard  SwitchDimming="Switch" SwitchDimmingAdd="SwitchDimmingAdd" />
    </MudPaper>
}


@code
{
    [Parameter]
    public bool IsDimming { get; set; }

    [Parameter]
    public Action SwitchDimming { get; set; }

    private void Switch()
    {
        SwitchDimming();
        StateHasChanged();
    }

    private void SwitchDimmingAdd()
    {
        SwitchDimming();
        Platforms = ReleaseManager.GetAllPlatforms().Result;
        if(Platforms is not null)
            AllNamePlatforms = Platforms.Select(x => x.Name).ToArray();
        StateHasChanged();
    }
    
    
    
    bool _clickOnRow = true;
    MudDatePicker _picker;
    private string _searchString = "";
    private TableEditTrigger editTrigger = TableEditTrigger.EditButton;
    private ReleaseModel elementBeforeEdit;
    
    private IList<ReleaseModel> Releases { get; set; }
    
    private IList<PlatformResponse> Platforms { get; set; }
    private string[] AllNamePlatforms { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        Releases = await ReleaseManager.GetPlannedReleases() ;
        Platforms = await ReleaseManager.GetAllPlatforms();
        
    /*// TODO Тестовые данные
        Releases = new List<ReleaseModel>()
        {
            new ReleaseModel(Guid.NewGuid(), 1, 1, 1, "Android", "Testing", 
                new DateTime(2022, 11, 11), new DateTime(2022, 11, 11),"http", "GG"),
            new ReleaseModel(Guid.NewGuid(), 1, 1, 1, "Android", "Testing",
                new DateTime(2022, 11, 11), new DateTime(2022, 11, 11), "http","GG"),
            new ReleaseModel(Guid.NewGuid(), 1, 1, 1, "Android", "Testing", 
                new DateTime(2022, 11, 11), new DateTime(2022, 11, 11), "http","GG")
        };
        
       Platforms = new List<PlatformResponse>()
        {
            new PlatformResponse("Android",1,1,1),
            new PlatformResponse("Ios",1,1,1)
        };
    // конец*/

        if(Platforms is not null)
            AllNamePlatforms = Platforms.Select(x => x.Name).ToArray();
    }
    
    private async Task<IEnumerable<string>> SearchPlatform(string value)
    {
        await Task.Delay(5);
        
        return string.IsNullOrEmpty(value) ? AllNamePlatforms
            : AllNamePlatforms.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void RowClicked(TableRowClickEventArgs<ReleaseModel> _)
    {
        if (_clickOnRow)
        {
            NavigationManager.NavigateTo($"/info/{_.Item.Id}");
        }
    }

    
    private void BackupItem(object release)
    {
        elementBeforeEdit = new ReleaseModel
            (
            ((ReleaseModel)release).Id,
            ((ReleaseModel)release).Major,
            ((ReleaseModel)release).Minor,
            ((ReleaseModel)release).Patch,
            ((ReleaseModel)release).PlatformName,
            ((ReleaseModel)release).ReleaseStatus,
            ((ReleaseModel)release).CompleteDate,
            ((ReleaseModel)release).UpdateDate,
            ((ReleaseModel)release).MainIssue,
            ((ReleaseModel)release).Description
            );
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object release)
    {
        ((ReleaseModel)release).Major = elementBeforeEdit.Major;
        ((ReleaseModel)release).Minor = elementBeforeEdit.Minor;
        ((ReleaseModel)release).Patch = elementBeforeEdit.Patch;
        ((ReleaseModel)release).PlatformName = elementBeforeEdit.PlatformName;
        ((ReleaseModel)release).ReleaseStatus = elementBeforeEdit.ReleaseStatus;
        ((ReleaseModel)release).MainIssue = elementBeforeEdit.MainIssue;
        ((ReleaseModel)release).CompleteDate = elementBeforeEdit.CompleteDate;
        StateHasChanged();
    }
    
    private async void ItemHasBeenCommitted(object release)
    {
        await ReleaseManager.UpdateRelease((ReleaseModel)release);
        Releases = await ReleaseManager.GetPlannedReleases() ;
        
        StateHasChanged();
    }
    
    private bool FilterFunc(ReleaseModel answer)
    {
        if (string.IsNullOrEmpty(_searchString))
            return true;
        if (answer.PlatformName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (answer.MainIssue.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (answer.ReleaseStatus.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return $"{answer.UpdateDate} {answer.CompleteDate}".Contains(_searchString);
    }
}