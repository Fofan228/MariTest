
@using Contracts.Releases
@using Mari.Client.Models.Releases
@using System.Text
@using Mari.Client.Models.Enums
@using Mari.Contracts.Platforms.Responces
@using Mari.Contracts.Releases.Responce
@using Microsoft.AspNetCore.Components
@inject IReleaseManager ReleaseManager
@inject NavigationManager NavigationManager
@inject IPlatformManager PlatformManager
@inject ISnackbar Snackbar

<MudTable Items="@Releases" Hover="true" T="ReleaseResponse" Class="mt-8" CanCancelEdit="true"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted"
          CommitEditTooltip="Сохранить" CancelEditTooltip="Отменить"
          EditTrigger="@editTrigger" Filter="new Func<ReleaseResponse,bool>(FilterFunc)"
          OnCommitEditClick="@(() => { Snackbar.Add("Изменения сохранены"); _clickOnRow = true; })"
          OnCancelEditClick="@(() => { Snackbar.Add("Отменено"); _clickOnRow = true; })"
          OnPreviewEditClick="@(() => _clickOnRow = false)" OnRowClick="RowClicked"> 
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Поиск по платформе, версии, релизной задаче, статусу и датам"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
    </ToolBarContent>
    <ColGroup>
        <col style="width: 15%;"/>
        <col style="width: 10%;"/>
        <col style="width: 25%;"/>
        <col style="width: 17%;"/>
        <col style="width: 15%;"/>
        <col style="width: 15%;"/>
    </ColGroup>
    <HeaderContent>
        <MudTh>Платформа</MudTh>
        <MudTh>Версия</MudTh>
        <MudTh>Релизная задача</MudTh>
        <MudTh>Статус релиза</MudTh>
        <MudTh>Дата изменения</MudTh>
        <MudTh>Дата завершения</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="PlatformName">@context.PlatformName</MudTd>
        <MudTd DataLabel="Version">@($"{context.Major.ToString()}.{context.Minor.ToString()}.{context.Patch.ToString()}")</MudTd>
        <MudTd DataLabel="ReleaseTask">
            <div @onclick:stopPropagation="true">
                <MudLink Href="@context.MainIssue">@context.MainIssue</MudLink>
            </div>
        </MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="UpdateDate">@context.UpdateDate.ToString()</MudTd>
        <MudTd DataLabel="CompleteDate">@context.CompleteDate.ToString()</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="PlatformName">
            <MudAutocomplete T="string" @bind-Value="@context.PlatformName" SearchFunc="@SearchPlatform" CoerceValue="true"/>
        </MudTd>
        <MudTd DataLabel="Version">

            <MudContainer  Class="flex-row d-flex align-end px-0 flex-grow-1 gap-1" >
                <MudTextField @bind-Value="@context.Major" Class="flex-none" Style="max-width: 28px" Variant="Variant.Text"  MaxLength="2"  Immediate="true" Label="Версия" /> 
                <MudText >.</MudText>
                <MudTextField @bind-Value="@context.Minor" Class="flex-none" Style="max-width: 28px" Variant="Variant.Text"  MaxLength="2"  Immediate="true"  /> 
                <MudText>.</MudText>
                <MudTextField @bind-Value="@context.Patch" Class="flex-none" Style="max-width: 28px" Variant="Variant.Text"  MaxLength="2"  Immediate="true"  /> 
            </MudContainer>

        </MudTd>
        <MudTd DataLabel="ReleaseTask">
            <MudTextField @bind-Value="@context.MainIssue" Required/>
        </MudTd>
        <MudTd DataLabel="Status">
            <MudSelect @bind-Value="@context.Status" Required>
                @foreach (var item in Enum.GetValues(typeof(ReleaseStatus)))
                {
                    <MudSelectItem Value="@Convert.ToString(item)">@item</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="UpdateDate">
            @context.UpdateDate.ToString()
        </MudTd>
        <MudTd DataLabel="CompleteDate">
            <MudDatePicker @bind-Date="@context.CompleteDate" PickerVariant="PickerVariant.Dialog" />
        </MudTd>
    </RowEditingTemplate>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Medium" Icon="@Icons.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled"/>
    </EditButtonContent>
</MudTable>

@code
{
    bool _clickOnRow = true;
    MudDatePicker _picker;
    private string _searchString = "";
    private TableEditTrigger editTrigger = TableEditTrigger.EditButton;
    private ReleaseResponse elementBeforeEdit;
    
    private IList<ReleaseResponse> Releases { get; set; }
    
    private IList<PlatformResponce> Platforms { get; set; }
    private string[] AllPlatforms { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        Releases = await ReleaseManager.GetPlannedReleases() ;
       
    }
    
    private async Task<IEnumerable<string>> SearchPlatform(string value)
    {
        await Task.Delay(5);
        
        return string.IsNullOrEmpty(value) ? AllPlatforms
            : AllPlatforms.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void RowClicked(TableRowClickEventArgs<ReleaseResponse> _)
    {
        if (_clickOnRow)
        {
            NavigationManager.NavigateTo("/info");
        }
    }

    private void BackupItem(object release)
    {
        elementBeforeEdit = new ReleaseResponse
            (
            ((ReleaseResponse)release).ReleaseId,
            ((ReleaseResponse)release).Major,
            ((ReleaseResponse)release).Minor,
            ((ReleaseResponse)release).Patch,
            ((ReleaseResponse)release).PlatformName,
            ((ReleaseResponse)release).Status,
            ((ReleaseResponse)release).MainIssue,
            ((ReleaseResponse)release).CompleteDate,
            ((ReleaseResponse)release).UpdateDate,
            ((ReleaseResponse)release).Description
            );
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object release)
    {
        ((ReleaseResponse)release).Major = elementBeforeEdit.Major;
        ((ReleaseResponse)release).Minor = elementBeforeEdit.Minor;
        ((ReleaseResponse)release).Patch = elementBeforeEdit.Patch;
        ((ReleaseResponse)release).PlatformName = elementBeforeEdit.PlatformName;
        ((ReleaseResponse)release).Status = elementBeforeEdit.Status;
        ((ReleaseResponse)release).MainIssue = elementBeforeEdit.MainIssue;
        ((ReleaseResponse)release).CompleteDate = elementBeforeEdit.CompleteDate;
        StateHasChanged();
    }
    
    private void ItemHasBeenCommitted(object release)
    {
        StateHasChanged();
    }
    
    private bool FilterFunc(ReleaseResponse answer)
    {
        if (string.IsNullOrEmpty(_searchString))
            return true;
        if (answer.PlatformName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (answer.MainIssue.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (answer.Status.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return $"{answer.UpdateDate} {answer.CompleteDate}".Contains(_searchString);
    }
}