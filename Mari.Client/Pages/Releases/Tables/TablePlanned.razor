@using Mari.Client.Models.Releases
@using Microsoft.AspNetCore.Components
@inject IReleaseManager ReleaseManager
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudTable Items="@Releases" Hover="true" T="ReleaseModel" Class="my-8" CanCancelEdit="true"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted"
          CommitEditTooltip="Сохранить" CancelEditTooltip="Отменить" RowsPerPage="5"
          EditTrigger="@editTrigger" Filter="new Func<ReleaseModel,bool>(FilterFunc)"
          OnCommitEditClick="@(() => { Snackbar.Add("Изменения сохранены"); _clickOnRow = true; })"
          OnCancelEditClick="@(() => { Snackbar.Add("Отменено"); _clickOnRow = true; })"
          OnPreviewEditClick="@(() => _clickOnRow = false)" OnRowClick="RowClicked"> 
    <ToolBarContent>
        <MudIconButton Icon="@Icons.Filled.Refresh" OnClick="Refresh"></MudIconButton>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Поиск по платформе, релизной задаче, статусу и датам"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"/>
    </ToolBarContent>
    <ColGroup>
        <col style="width: 16%;"/>
        <col style="width: 16%;"/>
        <col style="width: 16%;"/>
        <col style="width: 20%;"/>
        <col style="width: 16%;"/>
        <col style="width: 16%;"/>
        <col>
    </ColGroup>
    <HeaderContent>
        <MudTh>Платформа</MudTh>
        <MudTh>Версия</MudTh>
        <MudTh>Релизная задача</MudTh>
        <MudTh>Статус релиза</MudTh>
        <MudTh>Дата изменения</MudTh>
        <MudTh>Дата завершения</MudTh>
        <MudTh/>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="PlatformName">@context.PlatformName</MudTd>
        <MudTd DataLabel="Version">
            @($"{context.Version.Major.ToString()}." +
              $"{context.Version.Minor.ToString()}." +
              $"{context.Version.Patch.ToString()}")
        </MudTd>
        <MudTd DataLabel="ReleaseTask">
            <div @onclick:stopPropagation="true">
                <MudLink Href="@context.MainIssue">@_url</MudLink>
            </div>
        </MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="UpdateDate">@context.UpdateDate.ToString()</MudTd>
        <MudTd DataLabel="CompleteDate">@context.CompleteDate.ToString()</MudTd>
        <MudTd>
            <div @onclick:stopPropagation="true">
                <MudTooltip Text="Отправить в работу">
                    <MudIconButton Class="pa-0" OnClick="@(() => Trans(context))" Icon="@Icons.Filled.ScheduleSend"
                                   Size="@Size.Medium" Color="Color.Primary"/>
                </MudTooltip>
            </div>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="PlatformName">
            <MudAutocomplete T="string" @bind-Value="@context.PlatformName" SearchFunc="@SearchPlatform"
                             CoerceValue="true" ResetValueOnEmptyText="true" Required RequiredError="Заполните платформу"/>
        </MudTd>
        <MudTd DataLabel="Version">

            <MudContainer  Class="flex-row d-flex align-end px-0 flex-grow-1 gap-1" >
                <MudTextField @bind-Value="@context.Version.Major" Class="flex-none" Style="max-width: 28px"
                              Variant="Variant.Text"  MaxLength="2"  Immediate="true"
                              Required="true" RequiredError="@String.Empty"/> 
                <MudText >.</MudText>
                <MudTextField @bind-Value="@context.Version.Minor" Class="flex-none" Style="max-width: 28px"
                              Variant="Variant.Text"  MaxLength="2"  Immediate="true"
                              Required="true" RequiredError="@String.Empty"/> 
                <MudText>.</MudText>
                <MudTextField @bind-Value="@context.Version.Patch" Class="flex-none" Style="max-width: 28px"
                              Variant="Variant.Text"  MaxLength="2"  Immediate="true"
                              Required="true" RequiredError="@String.Empty"/> 
            </MudContainer>

        </MudTd>
        <MudTd DataLabel="ReleaseTask">
            <MudTextField @bind-Value="@context.MainIssue"/>
        </MudTd>
        <MudTd DataLabel="Status">
            @context.Status
        </MudTd>
        <MudTd DataLabel="UpdateDate">
            @context.UpdateDate.ToString()
        </MudTd>
        <MudTd DataLabel="CompleteDate">
            <MudDatePicker @bind-Date="@context.CompleteDate" PickerVariant="PickerVariant.Dialog" />
        </MudTd>
        <MudTd>
            <MudIconButton Class="pa-0"Icon="@Icons.Filled.ScheduleSend"
                           Disabled="true" Size="@Size.Medium" Color="Color.Primary"/>
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager HideRowsPerPage="true"/>
    </PagerContent>
    <EditButtonContent Context="button">
        <MudTooltip Text="Изменить">
            <MudIconButton Size="@Size.Medium" Icon="@Icons.Outlined.Edit" Class="pa-0"
                           OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled"/>
        </MudTooltip>
    </EditButtonContent>
</MudTable>

@if (IsDimming)
{
    <MudPaper Class="paper-create-release" Elevation="0">
        <CreateReleaseCard  SwitchDimming="Switch" SwitchDimmingAdd="SwitchDimmingAdd" />
    </MudPaper>
}


@code
{
    [Parameter]
    public bool IsDimming { get; set; }

    [Parameter]
    public Func<Task> SwitchDimming { get; set; }

    private void Switch()
    {
        SwitchDimming();
        StateHasChanged();
    }

    private async Task SwitchDimmingAdd()
    {
        SwitchDimming();
        Releases = await ReleaseManager.GetPlanned();
        Platforms = await ReleaseManager.GetAllPlatforms();
        if(Platforms is not null)
            AllNamePlatforms = Platforms.Select(x => x.Name).ToArray();
        StateHasChanged();
    }


    private string _url = "Ссылка на задачу";
    bool _clickOnRow = true;
    MudDatePicker _picker;
    private string _searchString = "";
    private TableEditTrigger editTrigger = TableEditTrigger.EditButton;
    private ReleaseModel elementBeforeEdit;
    
    private IList<ReleaseModel> Releases { get; set; }
    
    private IList<PlatformModel> Platforms { get; set; }
    private string[] AllNamePlatforms { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        Releases = await ReleaseManager.GetPlanned() ;
        Platforms = await ReleaseManager.GetAllPlatforms();
        
    // TODO Тестовые данные
   // Releases = new List<ReleaseModel>()
        /*{
             new ReleaseModel
            {
                Id = Guid.NewGuid(),
                Version = new VersionModel{Major = 1,Minor = 1,Patch = 1},
                PlatformName = "Android", Status = "Testing",
                CompleteDate = new DateTime(2022, 11, 11),
                UpdateDate = new DateTime(2022, 11, 11),
                MainIssue = "http",
                Description = "GG"
           }
        };*/
        
       /*Platforms = new List<PlatformModel>()
        {
            new PlatformModel
            {
                Name = "Android",
                LastVersion = new VersionModel
                    {
                        Major = 1,
                        Minor = 1,
                        Patch =1
                    }
            },
            new PlatformModel
            {
                Name = "IOS",
                LastVersion = new VersionModel
                {
                    Major = 1,
                    Minor = 1,
                    Patch =1
                }
            },
        };*/
    // конец
        
        AllNamePlatforms = Platforms.Select(x => x.Name).ToArray();
    }
    
    private async Task<IEnumerable<string>> SearchPlatform(string value)
    {
        await Task.Delay(5);
        
        return string.IsNullOrEmpty(value) ? AllNamePlatforms
            : AllNamePlatforms.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void RowClicked(TableRowClickEventArgs<ReleaseModel> _)
    {
        if (_clickOnRow)
        {
            NavigationManager.NavigateTo($"/info/{_.Item.Id}");
        }
    }

    
    private void BackupItem(object obj)
    {
        var release = (ReleaseModel)obj;

        elementBeforeEdit = new ReleaseModel
        {
            Id = release.Id,
            Version = release.Version,
            PlatformName = release.PlatformName,
            Status = release.Status,
            CompleteDate = release.CompleteDate,
            UpdateDate =release.UpdateDate,
            MainIssue = release.MainIssue,
            Description =release.Description
        };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object release)
    {
        ((ReleaseModel)release).Version = elementBeforeEdit.Version;
        ((ReleaseModel)release).PlatformName = elementBeforeEdit.PlatformName;
        ((ReleaseModel)release).Status = elementBeforeEdit.Status;
        ((ReleaseModel)release).MainIssue = elementBeforeEdit.MainIssue;
        ((ReleaseModel)release).CompleteDate = elementBeforeEdit.CompleteDate;
        StateHasChanged();
    }
    
    private async void ItemHasBeenCommitted(object release)
    {
        await ReleaseManager.Update((ReleaseModel)release);
        Releases = await ReleaseManager.GetPlanned() ;
        
        StateHasChanged();
    }
    
    private bool FilterFunc(ReleaseModel answer)
    {
        if (string.IsNullOrEmpty(_searchString))
            return true;
        if (answer.PlatformName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (answer.MainIssue.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (answer.Status.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return $"{answer.UpdateDate} {answer.CompleteDate}".Contains(_searchString);
    }
    
    [Inject] private IDialogService DialogService { get; set; }


    
    private async Task Trans(ReleaseModel model)
    {
        if (model.PlatformName != null && model.MainIssue != null
            && model.CompleteDate != null && model.UpdateDate != null)
        {
            await ReleaseManager.SetInWorkStatus(model.Id);
            Releases = await ReleaseManager.GetPlanned();
            StateHasChanged();
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                "Внимание", 
                "Пожалуйста, заполните все данные релиза перед отправкой в работу!", 
                yesText:"Хорошо");
        }
    }
    
    
    private async Task Refresh()
    {
        Releases = await ReleaseManager.GetPlanned();
        StateHasChanged();
    }
}