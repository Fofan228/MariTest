 @using Mari.Contracts.Releases
@using Mari.Contracts.Releases.Responses
@using Mari.Client.Models.Releases
@inject IReleaseManager ReleaseManager
@inject NavigationManager NavigationManager

<MudTable Class="mt-8" Items="@Releases" Hover="true" T="ReleaseModel"
          OnRowClick="RowClicked" Filter="new Func<ReleaseModel,bool>(FilterFunc)">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Поиск по платформе, релизной задаче, статусу и датам"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
    </ToolBarContent>
    <ColGroup>
        <col style="width: 15%;"/>
        <col style="width: 10%;"/>
        <col style="width: 25%;"/>
        <col style="width: 17%;"/>
        <col style="width: 15%;"/>
        <col style="width: 15%;"/>
    </ColGroup>
    <HeaderContent>
        <MudTh>Платформа</MudTh>
        <MudTh>Версия</MudTh>
        <MudTh>Релизная задача</MudTh>
        <MudTh>Статус релиза</MudTh>
        <MudTh>Дата изменения</MudTh>
        <MudTh>Дата завершения</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="PlatformName">@context.PlatformName</MudTd>
        <MudTd DataLabel="Version">@($"{context.Version.Major.ToString()}.{context.Version.Minor.ToString()}.{context.Version.Patch.ToString()}")</MudTd>
        <MudTd DataLabel="ReleaseTask">
            <div @onclick:stopPropagation="true">
                <MudLink Href="#">@context.MainIssue</MudLink>
            </div>
        </MudTd>
        <MudTd DataLabel="ReleaseStatus">@context.Status</MudTd>
        <MudTd DataLabel="UpdateDate">@context.UpdateDate.ToString()</MudTd>
        <MudTd DataLabel="CompleteDate">@context.CompleteDate.ToString()</MudTd>
    </RowTemplate>
</MudTable>

@code {
    private string _searchString = "";
    
    private IList<ReleaseModel> Releases { get; set; }

    protected override async Task OnInitializedAsync()
    {
       Releases = await ReleaseManager.GetCurrent();
        
        
    // TODO Тестовые данные
        /*Releases = new List<ReleaseModel>()
        {
             new ReleaseModel
            {
                Id = Guid.NewGuid(),
                Version = new VersionModel{Major = 1,Minor = 1,Patch = 1},
                PlatformName = "Android", Status = "Testing",
                CompleteDate = new DateTime(2022, 11, 11),
                UpdateDate = new DateTime(2022, 11, 11),
                MainIssue = "http",
                Description = "GG"
            }
        };*/
    // конец*/
    }
    
    private void RowClicked(TableRowClickEventArgs<ReleaseModel> _)
    {
    
            NavigationManager.NavigateTo($"/info/{_.Item.Id}");
        
    }
    private bool FilterFunc(ReleaseModel answer)
    {
        if (string.IsNullOrEmpty(_searchString))
            return true;
        if (answer.PlatformName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (answer.MainIssue.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (answer.Status.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return $"{answer.UpdateDate} {answer.CompleteDate}".Contains(_searchString);
    }
} 